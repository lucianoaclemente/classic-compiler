// ================================================================
// PROGRAMS AND BLOCKS
// ================================================================

program: "program"i identifier ";" block "."

identifier: /\b([a-zA-Z0-9]{1,31})\b/

block: label_declaration_part constant_definition_part variable_declaration_part statement_part 

// type_definition_part

 


label_declaration_part: | "label"i label ("," label)* ";"

label: identifier

constant_definition_part: | "const"i constant_definition (";" constant_definition)* ";" 
 
constant_definition: identifier "=" constant 
 
statement_part: compound_statement

compound_statement: "begin"i "end"i

// type_definition_part: | "type"i type_definition (";" type_definition)* ";"
// type_definition: identifier "=" type
// type: simple_type | structured_type | pointer_type
// simple_type: scalar_type | subrange_type | type_identifier
// scalar_type: identifier ("," identifier)*
// subrange_type: constant ".." constant
// structured_type: array_type | record_type | set_type | file_type
// array_type: "array"i index_type ("," index_type)* "of"i component_type
// index_type: simple_type
// component_type: type
// record_type: "record"i field_list "end"
// field_list: fixed_part | fixed_part ";" variant_part | variant_part
// fixed_part: record_section (";" record_section)*
// record_section: | field_identifier ("," field_identifier)* ":" type
// variant_type: "case"i tag_field type_identifier "of" variant (";" variant)*
// tag_field: | field_identifier ":"
// variant: | case_label_list ":" ( field_list )*
// case_label_list: case_label ("," case_label)
// case_label: constant
// set_type: "set"i "of"i base_type
// base_type: simple_type
// file_type: "file"i "of"i type
// pointer_type: type_identifier

variable_declaration_part: | "var"i variable_declaration (";" variable_declaration)* ";"

variable_declaration: identifier ("," identifier)* ":" type

type: simple_type

simple_type: type_identifier

type_identifier: identifier






// ================================================================
// LOW LEVEL DEFINITIONS
// ================================================================

sign: "+" | "-"

primitive: INTEGER
		| FLOAT
		| BOOLEAN
		| CHAR
		| STRING
		| HEXLITERAL
		| BINLITERAL

constant: primitive | identifier | sign identifier

// ---------------------- Primitives 	   
	      
INTEGER: /([+-]?[1-9]\d*|0)/
FLOAT: /[-+]?\-?\d+\.\d+/
BOOLEAN: /(?i)(true|false)/
CHAR: "'" /([^'])/ "'"
STRING: "'" /([^']+){2,}/ "'"

// ---------------------- Literal

HEXLITERAL: /[$][0-9a-fA-F]+/	
BINLITERAL: /[%][01]+/   

COMMENT:  /\{(.|\n)+\}/
       |  /\/\/(.)+/

	%import common.WS
	%import common.LETTER
	%import common.DIGIT
	%ignore COMMENT
    %ignore WS